#!/usr/bin/env python3
def solve(chapters: list) -> int:
    length = len(chapters)

    # cache[a][b] == (sum(chapters[b:b + a]), solve(chapters[b:b + a]))
    cache = { width: [-1]*(length - width + 1) for width in range(1, length + 1) }

    # width == 1
    for i in range(length - 1 + 1):
        cache[1][i] = (chapters[i], 0)

    for width in range(2, length + 1):
        for i in range(length - width + 1):
            cache[width][i] = min(
                (
                    (
                        cache[j][i][0] + cache[width-j][i+j][0],
                        cache[j][i][0] + cache[width-j][i+j][0] + cache[j][i][1] + cache[width-j][i+j][1],
                    )
                    for j in range(1, width)
                ),
                key=lambda e:e[1]
            )

    return cache[length][0][1]

for _ in range(int(input())):
    input()
    chapters = [int(x) for x in input().split()]
    # assert 3 <= len(chapters) <= 500
    # assert all(file <= 10000 for file in chapters)

    answer = solve(chapters)
    print(answer)
